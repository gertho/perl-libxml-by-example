#!/usr/bin/perl
##############################################################################
#
# Publish latest version to GitHub pages site:
#
# Use --help option for more details
#

use 5.010;
use strict;
use warnings;
use autodie;

use Pod::Usage;
use Getopt::Long  qw(GetOptions);
use POSIX         qw(strftime);

$| = 1;   # turn off output buffering for prompt


my $generated_dir = 'build/html';
my $target_dir = '../perl-libxml-by-example-pages';

my(%opt);

if(!GetOptions(\%opt, 'help|?', 'message|m=s', 'dryrun|dry-run')) {
    pod2usage(-exitval => 1,  -verbose => 0);
}

pod2usage(-exitstatus => 0, -verbose => 2) if $opt{help};

my $message = commit_message();
check_uncommitted();
build_all();
publish_to_gh_pages($message);

exit;


sub commit_message {
    if(my $message = $opt{message}) {
        my $log = `git log --pretty=oneline -1`;
        my($commit_id) = $log =~ m{\A(\w{12})};
        return "$message\n\n  Source commit: $commit_id";
    }
    elsif($opt{dryrun}) {
        return;
    }
    else {
        say "You must specify a commit message with -m";
        say "Recent commits:";
        my $mtime = (stat("$target_dir/.git/index"))[9];
        $mtime = strftime('%F-%T', localtime($mtime));
        my $log = `git log --pretty=format:'%h %s' \@{$mtime}..`;
        if($log =~ /\S/) {
            say $log;
        }
        else {
            say "No changes in source repo";
        }
        exit 1;
    }
}


sub check_uncommitted {
    my $git_status = `git status -s`;
    return unless $git_status =~ /\S/;

    say "WARNING: Uncommitted changes ...\n\n$git_status";
    print "Publish anyway? (y/N) ";

    my $response = <STDIN>;
    return if $response =~ /^y(es)?/i;

    exit;
}


sub build_all {
    system('make', 'html') == 0
        or die "Failed to generate HTML from source\n";
}


sub publish_to_gh_pages {
    my($commit_message) = @_;

    system(
        'rsync', '-rav', '--checksum', '--delete',
        '--exclude=.git',
        '--exclude=.nojekyll',
        '--exclude=.buildinfo',
        '--exclude=.*.swp',
        $generated_dir . '/',
        $target_dir . '/',
    ) == 0 or die "Failed to sync files to gh-pages repo\n";

    # Don't commit/push to GitHub pages if --dry-run was specified

    if($opt{dryrun}) {
        warn "Bailing out before publishing to GitHub pages due to --dry-run option\n";
        return;
    }

    chdir($target_dir);

    system('git', 'add', '--all') == 0
        or die "Failed to add files to gh-pages repo\n";

    system('git', 'commit', '-m', $commit_message)  == 0
        or die "Failed to commit changes to gh-pages repo\n";

    system('git', 'push', 'origin') == 0
        or die "Failed to push update to GitHub\n";

    say "Site updated successfully";
}

__END__

=head1 NAME

publish - Push current version of Perl XML::LibXML by Example site to gh-pages

=head1 SYNOPSIS

  publish -m <commit message>

  Options:

   -m <msg>   set the commit message to be used
   --dry-run  do everything except commit and push to GitHub pages
   -?         detailed help message

=head1 DESCRIPTION

Generate and publish the current version of the "Perl XML::LibXML by Example"
documentation project to GitHub pages:

=over 4

=item *

check for uncommitted changes

=item *

regenerate HTML

=item *

rsync generated files to parallel checkout dir on gh-pages branch

=item *

add and commit all changes

=item *

push to GitHub

=back

=head1 OPTIONS

=over 4

=item B<< --message <msg> >> (alias: -m)

Set the text of the commit message to use on the gh-pages branch.

=item B<--dry-run>

Do everything except commit and push to GitHub pages.

=item B<--help> (alias: -?)

Display this documentation.

=back

=cut



